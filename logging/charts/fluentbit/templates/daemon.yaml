apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ .Values.app.name }}
  namespace: {{ .Values.environment.namespace }}
  labels:
    k8s-app: {{ .Values.app.name -}}- {{-  .Values.metadata.name }}
    version: v1
    kubernetes.io/cluster-service: "true"
spec:
  selector:
    matchLabels:
      k8s-app: {{ .Values.app.name -}}- {{- .Values.metadata.name }}
  template:
    metadata:
      labels:
        k8s-app: {{ .Values.app.name -}}- {{- .Values.metadata.name }}
        version: v1
        kubernetes.io/cluster-service: "true"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "2020"
        prometheus.io/path: /api/v1/metrics/prometheus
    spec:
      serviceAccountName: {{ .Values.app.name }}
      terminationGracePeriodSeconds: 10
      containers:
      - name: {{ .Values.app.name }}
        image: {{ .Values.image.repository }}: {{- .Values.image.tag }}
        imagePullPolicy: Always
        ports:
          - containerPort: 2020
        volumeMounts:
        - name: varlog
          mountPath: /var/log
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
        - name: {{ .Values.app.name -}}-etc
          mountPath: /fluent-bit/etc/
        - name: mnt
          mountPath: /mnt
          readOnly: true
      volumes:
      - name: varlog
        hostPath:
          path: /var/log
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
      - name: {{ .Values.app.name -}}-etc
        configMap:
          name: {{ .Values.app.name -}}-config
      - name: mnt
        hostPath:
          path: /mnt
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule